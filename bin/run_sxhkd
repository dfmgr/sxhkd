#!/usr/bin/env bash
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
PROG="$(basename "$0")"
VERSION="202104020437-git"
USER="${SUDO_USER:-${USER}}"
HOME="${USER_HOME:-${HOME}}"
SRC_DIR="${BASH_SOURCE%/*}"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#set opts
trap '[ -f "$RUN_SXHKD_TEMP_FILE" ] && rm -Rf "$RUN_SXHKD_TEMP_FILE" &>/dev/null' EXIT

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
##@Version       : 202104020437-git
# @Author        : Jason Hempstead
# @Contact       : jason@casjaysdev.com
# @License       : LICENSE.md
# @ReadME        : run_sxhkd --help
# @Copyright     : Copyright: (c) 2021 Jason Hempstead, CasjaysDev
# @Created       : Friday, Apr 02, 2021 04:53 EDT
# @File          : run_sxhkd
# @Description   : Simple X HotKey Daemon wrapper script
# @TODO          :
# @Other         :
# @Resource      :
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
run_sxhkd_main() {
  # Main function file
  if [ -f "$SRC_DIR/functions.bash" ]; then
    FUNCTIONS_DIR="$SRC_DIR"
    . "$FUNCTIONS_DIR/functions.bash"
  elif [ -f "$HOME/.local/bin/functions.bash" ]; then
    FUNCTIONS_DIR="$HOME/.local/bin"
    . "$FUNCTIONS_DIR/functions.bash"
  else
    printf "\t\t\033[0;31m%s \033[0m\n" "Couldn't source the functions file from $FUNCTIONS_DIR"
    return 1
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # helper functions - See github.com/dfmgr/misc/bin/functions.bash
  __version() { app_version; }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __help() {
    app_help "4" "Usage: run_sxhkd [options] " \
      "*                      -  start sxhkd" \
      "bindings               -  show keybindings" \
      "-s, --start            -  start sxhkd" \
      "-r, --restart          -  restart sxhkd" \
      "-k, --kill             -  stop sxhkd" \
      "-c, --config           -  create config file" \
      "-v, --version          -  display version" \
      "-h, --help             -  display help" \
      "--options              -  used by completions"
    exit $?
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __gen_config() {
    printf_green "Generating the config file in"
    printf_green "$RUN_SXHKD_CONFIG_DIR/$RUN_SXHKD_CONFIG_FILE"
    [ -d "$RUN_SXHKD_CONFIG_DIR" ] || mkdir -p "$RUN_SXHKD_CONFIG_DIR"
    [ -d "$RUN_SXHKD_CONFIG_BACKUP_DIR" ] || mkdir -p "$RUN_SXHKD_CONFIG_BACKUP_DIR"
    [ -f "$RUN_SXHKD_CONFIG_DIR/$RUN_SXHKD_CONFIG_FILE" ] &&
      cp -Rf "$RUN_SXHKD_CONFIG_DIR/$RUN_SXHKD_CONFIG_FILE" "$RUN_SXHKD_CONFIG_BACKUP_DIR/$RUN_SXHKD_CONFIG_FILE.$$"
    cat <<EOF >"$RUN_SXHKD_CONFIG_DIR/$RUN_SXHKD_CONFIG_FILE"
# Settings for run_sxhkd
RUN_SXHKD_LOG_FILE="${LOGDIR:-$HOME/.local/log}/sxhkd/run.log"
RUN_SXHKD_BIND_FILE="${RUN_SXHKD_BIND_FILE:-$HOME/.config/sxhkd/sxhkdrc}"
RUN_SXHKD_FIFO_FILE="${RUN_SXHKD_FIFO_FILE:-$HOME/.cache/sxhkd}"
RUN_SXHKD_NOTIFY_ENABLED="${RUN_SXHKD_NOTIFY_ENABLED:-yes}"
RUN_SXHKD_NOTIFY_CLIENT_NAME="${RUN_SXHKD_NOTIFY_CLIENT_NAME:-SXHKD}"
RUN_SXHKD_NOTIFY_CLIENT_ICON="${RUN_SXHKD_NOTIFY_CLIENT_ICON:-system}"

EOF
    if [ -f "$RUN_SXHKD_CONFIG_DIR/$RUN_SXHKD_CONFIG_FILE" ]; then
      printf_green "Your config file for run_sxhkd has been created"
      true
    else
      printf_red "Failed to create the config file"
      false
    fi
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __create_fifo() {
    local RUN_SXHKD_FIFO_FILE="${1:-$RUN_SXHKD_FIFO_FILE}"
    if [ ! -p "$RUN_SXHKD_FIFO_FILE" ]; then
      mkfifo "$RUN_SXHKD_FIFO_FILE" &>/dev/null
    fi
    [ -p "$RUN_SXHKD_FIFO_FILE" ] && true || false
    return $?
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  __get_sxhkd_pid() {
    ps -ux | grep [s]xhkdrc | head -n1 | awk '{print $2}' | grep '^' && true || false
    return $?
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  sxhkd_kill() {
    local pid date
    pid="$(__get_sxhkd_pid)"
    date="$(date +'%Y-%m-%d at %H:%M')"
    if [[ -n "$pid" ]] &>/dev/null; then
      kill -9 "$pid" &>/dev/null
    fi
    if __get_sxhkd_pid &>/dev/null; then
      echo "Failed to stop sxhkd: $date" >>"$RUN_SXHKD_LOG_FILE"
      __sxhkd_notifications "Failed to stop sxhkd"

      exitCode=1
    else
      echo "Stopped sxhkd: $date" >>"$RUN_SXHKD_LOG_FILE"
      __sxhkd_notifications "Stopped sxhkd"
      rm -Rf "$RUN_SXHKD_FIFO_FILE" &>/dev/null
      exitCode=0
    fi
    return ${exitCode:-$?}
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  sxhkd_reload() {
    local pid date
    date="$(date +'%Y-%m-%d at %H:%M')"
    echo "Restarting sxhkd: $date" >>"$RUN_SXHKD_LOG_FILE"
    pkill -USR1 -x sxhkd &>>"$RUN_SXHKD_LOG_FILE" && __sxhkd_notifications 'Reloaded the config'
    return $?
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  sxhkdcmd() {
    local pid date
    date="$(date +'%Y-%m-%d at %H:%M')"
    if __get_sxhkd_pid &>/dev/null; then
      sxhkd_reload
      exitCode=$?
    else
      __sxhkd_notifications "sxhkd is starting"
      printf_green "sxhkd is starting"
      echo "Starting sxhkd: $date" >"$RUN_SXHKD_LOG_FILE"
      if [[ -n "$RUN_SXHKD_FIFO_FILE" ]]; then
        __create_fifo "$RUN_SXHKD_FIFO_FILE"
        sxhkd -c "$RUN_SXHKD_BIND_FILE" -s "$RUN_SXHKD_FIFO_FILE" &>>"$RUN_SXHKD_LOG_FILE" &
        exitCode=$?
      else
        sxhkd -c "$RUN_SXHKD_BIND_FILE" &>>"$RUN_SXHKD_LOG_FILE" &
        exitCode=$?
      fi
    fi
    return ${exitCode:-$?}
  }
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Defaults
  local exitCode=""
  local RUN_SXHKD_CONFIG_FILE="settings.conf"
  local RUN_SXHKD_CONFIG_DIR="${RUN_SXHKD_CONFIG_DIR:-$HOME/.config/misc/settings/run_sxhkd}"
  local RUN_SXHKD_CONFIG_BACKUP_DIR="${RUN_SXHKD_CONFIG_BACKUP_DIR:-$HOME/.local/share/misc/run_sxhkd/backups}"
  local RUN_SXHKD_OPTIONS_DIR="${RUN_SXHKD_OPTIONS_DIR:-$HOME/.local/share/misc/run_sxhkd/options}"
  local RUN_SXHKD_TEMP_FILE="${RUN_SXHKD_TEMP_FILE:-${TMPDIR:-/tmp}/run_sxhkd}"
  local RUN_SXHKD_NOTIFY_ENABLED="${RUN_SXHKD_NOTIFY_ENABLED:-yes}"
  local RUN_SXHKD_NOTIFY_CLIENT_NAME="${RUN_SXHKD_NOTIFY_CLIENT_NAME:-SXHKD}"
  local RUN_SXHKD_NOTIFY_CLIENT_ICON="${RUN_SXHKD_NOTIFY_CLIENT_ICON:-system}"
  local RUN_SXHKD_BIND_FILE="${RUN_SXHKD_BIND_FILE:-$HOME/.config/sxhkd/sxhkdrc}"
  local RUN_SXHKD_FIFO_FILE="${RUN_SXHKD_FIFO_FILE:-$HOME/.cache/sxhkd}"
  local RUN_SXHKD_LOG_FILE="${RUN_SXHKD_LOG_FILE:-${LOGDIR:-$HOME/.local/log}/sxhkd/run.log}"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Argument/Option settings
  local SETARGS="${*}"
  local SHORTOPTS="c,v,h,s,r,k,p"
  local LONGOPTS="options,config,version,help,start,restart,kill,status"
  local ARRAY="bindings"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Generate Files
  [ -f "$RUN_SXHKD_CONFIG_DIR/$RUN_SXHKD_CONFIG_FILE" ] || __gen_config &>/dev/null
  [ -f "$RUN_SXHKD_OPTIONS_DIR/options" ] || __list_options "$RUN_SXHKD_OPTIONS_DIR" &>/dev/null
  [ -f "$RUN_SXHKD_OPTIONS_DIR/array" ] || __list_array "$RUN_SXHKD_OPTIONS_DIR" "$ARRAY" &>/dev/null
  [ -f "$RUN_SXHKD_LOG_FILE" ] || mkdir -p "$(dirname "$RUN_SXHKD_LOG_FILE")"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Import config
  if [ -f "$RUN_SXHKD_CONFIG_DIR/$RUN_SXHKD_CONFIG_FILE" ]; then
    . "$RUN_SXHKD_CONFIG_DIR/$RUN_SXHKD_CONFIG_FILE"
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  if [ "$RUN_SXHKD_NOTIFY_ENABLED" = "yes" ]; then
    __sxhkd_notifications() {
      export NOTIFY_CLIENT_NAME="$RUN_SXHKD_NOTIFY_CLIENT_NAME"
      export NOTIFY_CLIENT_ICON="$RUN_SXHKD_NOTIFY_CLIENT_ICON"
      notifications "$RUN_SXHKD_NOTIFY_CLIENT_NAME" "$@" && exitCode=0 || exitCode=1
      unset NOTIFY_CLIENT_NAME NOTIFY_CLIENT_ICON
      return ${exitCode:-$?}
    }
  else
    __sxhkd_notifications() { false; }
  fi
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # options
  local setopts
  setopts=$(getopt -o "$SHORTOPTS" --long "$LONGOPTS" -a -n "$PROG" -- "$@" 2>/dev/null)
  eval set -- "${setopts[@]}" 2>/dev/null
  while :; do
    case $1 in
    --options)
      shift 1
      __list_array "$RUN_SXHKD_OPTIONS_DIR" "$ARRAY"
      __list_options "$RUN_SXHKD_OPTIONS_DIR"
      exit $?
      ;;
    -v | --version)
      shift 1
      __version
      exit $?
      ;;
    -h | --help)
      shift 1
      __help
      exit $?
      ;;
    -c | --config)
      shift 1
      __gen_config
      exit $?
      ;;
    -s | --start)
      shift 1
      SETOPTS="start"
      ;;
    -r | --restart)
      shift 1
      SETOPTS="restart"
      ;;
    -k | --kill)
      shift 1
      SETOPTS="kill"
      ;;
    -b | --bindings)
      shift 1
      SETOPTS="bindings"
      ;;
    -p | --status)
      shift 1
      SETOPTS="status"
      ;;
    --)
      shift 1
      break
      ;;
    esac
  done
  #set -- "$SETARGS"
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Actions based on env

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Check for required applications/Network check
  cmd_exists --error bash sxhkd || exit 1
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # APP Variables

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # begin main app
  case "${SETOPTS:-$1}" in
  bindings)
    if [[ -n "$DISPLAY" ]] && [[ "$(uname -s)" = "Linux" ]] && cmd_exists rofi; then
      cmd_exists sxhkd_help && sxhkd_help
    elif [ -t 0 ]; then
      grep " # " "$HOME/.config/sxhkd/KeyBindings.md" | less
    else
      myterminal -e "less $HOME/.config/sxhkd/KeyBindings.md"
    fi
    ;;

  status)
    shift 1
    pid="$(__get_sxhkd_pid)"
    if [[ -n "$pid" ]]; then
      __sxhkd_notifications "sxhkd is running: pid is $pid"
    else
      __sxhkd_notifications "sxhkd is not running"
    fi
    ;;

  restart)
    shift 1
    sxhkd_reload
    ;;

  start)
    shift 1
    sxhkdcmd
    ;;

  kill)
    shift 1
    sxhkd_kill
    ;;

  *)
    sxhkdcmd
    ;;
  esac
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # lets exit with code
  return "${exitCode:-$?}"
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# execute function
run_sxhkd_main "$@"
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# End application
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# lets exit with code
exit "${exitCode:-$?}"
